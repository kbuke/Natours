*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  /* 
    set root font size 
    now 1rem = 10px
    set to 10px for ease
  */
  font-size: 62.5%;
}

body{
  font-weight: 400;
  /* no longer needed due to setting root font-size */
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* adjust to root font-size */
  padding: 3rem;
}


.header{
  height: 95vh;
  background-size: cover;
  background-position: top;
  background-image: 
    linear-gradient(
      to right bottom, 
      hsla(111, 55%, 64%, 0.804), hsla(160, 64%, 43%, 0.809)
    ), 
    url("resources/imgs/hero.jpg");
    
    clip-path: polygon(
      0 0,
      100% 0,
      100% 85vh,
      0 100%
    );

    /* This is the origin of where its children start.
    See below w. logo-box as it is absolute, the top and left start 40px
    from the beginning of the header class */
    position: relative;
}

.logo-box {
  position: absolute; 
  /* adjust to root font-size */
  top: 4rem;
  left: 4rem;
}

.logo {
  /* adjust to root font-size */
  height: 3.5rem;
  /* width will b e auto set my browser when height is set */
}

.text-box{
  position: absolute;

  /*  This positions the left and top of the box at the 50% mark */
  /* top: 50%; */
  left: 50%;
  top: 40%; /* just to make it look more centered with the missing wedge */

  /*  This positions the center of the box (by the top and LHS)
      at the center of the page
  */
  transform: translate(-50%, -50%);

  /* due to btn:link and btn:visited being an inline block, we treat it as text */
  text-align: center;
}

.heading-primary{
  color: #fff;
  text-transform: uppercase;

  /* Stops headings from shaking */
  backface-visibility: hidden;

  margin-bottom: 6rem;
}

.heading-primary-main{
  /* put text on-top of eachother */
  display: block;

  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  /* link to key frame moveInLeft below */
  animation-name: moveInLeft;
  animation-duration: 2s;

  /* 
    animation-delay: 3s; => delays animation by set time 
    animation-timing-function: ease-in; => how quick it takes to run these requirements
    animation-iteration-count: 3; => how many times the animation should occur
  */
}

.heading-primary-sub{
  /* put text on-top of eachother */
  display: block;

  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.74rem;

  /* 
    due to heading-primary-main, just put animation
    and then computer will figure out the rest
  */
  animation: moveInRight 2s;
}

@keyframes moveInLeft {
  /*always best to optimise opacity and transform only*/
  0% {
    opacity: 0;
    transform: translateX(-10rem); /*animated in x direction*/
  }

  /* 
    can put values between for any value 
    in this case it creates a snap-back effect
  */
  80% {
    opacity: 0.8;
    transform: translateX(2rem);
  }

  100% {
    opacity: 1;
    transform: translate(0); /*ends exactly how it should*/
  }
}

@keyframes moveInRight {
  0%{
    opacity: 0;
    transform: 
      translateX(1rem)
      /* allows you to rotate things */
      /* rotate(0deg) */
    ;
  }

  /* 
    can put values between for any value 
    in this case it creates a snap-back effect
  */
  80%{
    opacity: 0.8;
    transform: 
      translateX(-2rem)
      /* rotate(120deg) */
    ;
  }

  100%{
    opacity: 1;
    transform: translate(0);
  }
}

/* use pseudo class for links (we used <a>) */
.btn:link,
/* state when a use clicks and visits the button, keeps it looking normal */
.btn:visited{
  text-transform: uppercase;
  text-decoration: none;

  /* This 15px is for top and bottom, 40px is left and right */
  padding: 1.5rem 4rem;

  /* gives more padding to button */
  display: inline-block;

  border-radius: 10rem;

  /* 
    this ensures all possibilities are carried out as so 
    therefore hover and click animations take 0.2s
  */
  transition: all .2s;

  /* as reference for our button behind */
  position: relative;

  font-size: 1.6rem;
}

.btn:hover{
  transform: translateY(-0.3rem); /* to mv box up, use negative val */

  /* 
    first val is offset in x-direction, 
    2nd is in y-axis, 
    3rd valu is blur 
    4th value is for opacity
  */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2); 
}

/* when we click, button is active */
.btn:active{
  /* not related to hiver state, always the initial state */
  transform: translateY(-0.1rem);
  /* make shadow seem less when clicked */
  box-shadow: 0 5px 1rem rgba(0, 0, 0, .2);
}

.btn-white{
  background-color: white;
  color: #777;

  animation: moveUp 2s;
}

/* this adds an element looking like our original button 
when we hover out of the button it hides behind it,
when he hover in the button it comes before it */
.btn::after{
  /* always need to specifiy content and display, even if they're empty */
  content: "";
  display: inline-block; /* orig button is the same */
  /* this button is a child of the orig button so 100% is the exact same dimension */
  height: 100%;
  width: 100%;
  border-radius: 10rem;

  /* ensure this button goes behind orig */
  position: absolute; /*this needs a reference, which will be the first element with relative value should be after the button orig*/
  top: 0;
  left: 0;
  z-index: -1;

  transition: all .4s;
}

.btn-white::after{
  background-color: white;
}

/* just means after pseudo element only when we hover the button */
.btn:hover::after{
  transform: scaleX(1.4) scaleY(1.6); /*scale increases the elements size */
  opacity: 0; /*with the transition in .btn:after this gives our fade out effect */
}

@keyframes moveUp {
  0% {
    opacity: 0;
    transform: translateY(10rem);
  }

  80%{
    opacity: 0.8;
    transform: translateY(-2rem);
  }

  100%{
    opacity: 1;
    transform: translate(0);
  }
}